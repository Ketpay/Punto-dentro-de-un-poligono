import timeit 
cor=[-12.120092, -77.041610]
print(cor[0])
print(cor[1])

poligono=[(-12.1261081696,-77.0023574829),(-12.1282138824,-77.0009384155),(-12.1284208298,-77.001121521),(-12.1281547546,-77.0055084229),(-12.127532959,-77.0090255737),(-12.1278238297,-77.0098648071),(-12.1293382645,-77.0117263794),(-12.1296405792,-77.0124740601),(-12.1294288635,-77.0128936768),(-12.1282567978,-77.0139007568),(-12.1282072067,-77.0141830444),(-12.1290302277,-77.0155334473),(-12.1298208237,-77.0176391602),(-12.1316900253,-77.0176696777),(-12.131521225,-77.0196762085),(-12.1334486008,-77.0206604004),(-12.1342306137,-77.0213317871),(-12.1364603043,-77.0252990723),(-12.1374511719,-77.0259933472),(-12.140712738,-77.0273208618),(-12.1418066025,-77.028213501),(-12.1418066025,-77.0284729004),(-12.1414690018,-77.0284729004),(-12.1409702301,-77.0284729004),(-12.1409730911,-77.0288162231),(-12.1409730911,-77.0290298462),(-12.1406602859,-77.0290298462),(-12.1400785446,-77.0290298462),(-12.1393041611,-77.0290298462),(-12.1393041611,-77.0293045044),(-12.1373615265,-77.0293045044),(-12.1373615265,-77.029586792),(-12.1362495422,-77.029586792),(-12.1362495422,-77.0298614502),(-12.1356935501,-77.0298614502),(-12.1356935501,-77.0301361084),(-12.1348600388,-77.0301361084),(-12.1348600388,-77.0306930542),(-12.134305954,-77.0306930542),(-12.134305954,-77.0309753418),(-12.1337499619,-77.0309753418),(-12.1337499619,-77.0315246582),(-12.1334724426,-77.0315246582),(-12.1334724426,-77.0318069458),(-12.1331939697,-77.0318069458),(-12.1331939697,-77.032081604),(-12.1329164505,-77.032081604),(-12.1329164505,-77.0326385498),(-12.1326379776,-77.0326385498),(-12.1326398849,-77.032913208),(-12.1323623657,-77.032913208),(-12.1323623657,-77.0337524414),(-12.1320819855,-77.0337524414),(-12.1320838928,-77.0343017578),(-12.1318063736,-77.0343017578),(-12.1318063736,-77.0345840454),(-12.1315279007,-77.0345840454),(-12.1315279007,-77.0351409912),(-12.1312503815,-77.0351409912),(-12.1312503815,-77.0354156494),(-12.1309719086,-77.0354156494),(-12.1309719086,-77.035697937),(-12.1306943893,-77.035697937),(-12.1306943893,-77.0362472534),(-12.1304178238,-77.0362472534),(-12.1304178238,-77.036529541),(-12.1301403046,-77.036529541),(-12.1301383972,-77.0368041992),(-12.1298618317,-77.0368041992),(-12.1298618317,-77.0370864868),(-12.1293058395,-77.0370864868),(-12.1293058395,-77.037361145),(-12.1284723282,-77.037361145),(-12.1284723282,-77.0376358032),(-12.1281957626,-77.0376358032),(-12.1281957626,-77.038192749),(-12.1276397705,-77.038192749),(-12.1276397705,-77.0384750366),(-12.1273622513,-77.0384750366),(-12.1273622513,-77.039024353),(-12.1270837784,-77.039024353),(-12.1270837784,-77.0393066406),(-12.1262493134,-77.0393066406),(-12.1262493134,-77.0395812988),(-12.1259708405,-77.0395812988),(-12.1259708405,-77.0398635864),(-12.1256933212,-77.0398635864),(-12.1256933212,-77.0401382446),(-12.1251373291,-77.0401382446),(-12.1251392365,-77.0415267944),(-12.1248607635,-77.0415267944),(-12.1248607635,-77.0440292358),(-12.1245832443,-77.0440292358),(-12.1245832443,-77.0445861816),(-12.1243047714,-77.0445861816),(-12.1243047714,-77.045135498),(-12.1237487793,-77.045135498),(-12.1237487793,-77.0459747314),(-12.1231946945,-77.0459747314),(-12.1231946945,-77.0465240479),(-12.1229152679,-77.0465240479),(-12.1229152679,-77.0468063354),(-12.1218032837,-77.0468063354),(-12.121805191,-77.0470809937),(-12.1206951141,-77.0470809937),(-12.1206951141,-77.0473632812),(-12.120139122,-77.0473632812),(-12.120139122,-77.0479202271),(-12.1198606491,-77.0479202271),(-12.1198606491,-77.0487518311),(-12.1195831299,-77.0487518311),(-12.1195831299,-77.0493087769),(-12.119304657,-77.0493087769),(-12.119304657,-77.0495834351),(-12.1187486649,-77.0495834351),(-12.1187486649,-77.0501403809),(-12.1184711456,-77.0501403809),(-12.118473053,-77.0506973267),(-12.117638588,-77.0506973267),(-12.117638588,-77.0509719849),(-12.1173610687,-77.0509719849),(-12.1173610687,-77.0512466431),(-12.1170825958,-77.0512466431),(-12.1170825958,-77.0515289307),(-12.1165266037,-77.0515289307),(-12.1165266037,-77.0518035889),(-12.1159734726,-77.0518035889),(-12.1159734726,-77.0520858765),(-12.1156921387,-77.0520858765),(-12.1156921387,-77.0523605347),(-12.1151390076,-77.0523605347),(-12.1151390076,-77.0526351929),(-12.1145820618,-77.0526351929),(-12.1145820618,-77.0529174805),(-12.1143035889,-77.0529174805),(-12.1143035889,-77.0531921387),(-12.1137514114,-77.0531921387),(-12.1137514114,-77.0534744263),(-12.1131944656,-77.0534744263),(-12.1131944656,-77.0543060303),(-12.1129159927,-77.0543060303),(-12.1129159927,-77.0545806885),(-12.1126384735,-77.0545806885),(-12.1126384735,-77.0548629761),(-12.1123600006,-77.0548629761),(-12.1123600006,-77.0551376343),(-12.1120853424,-77.0551376343),(-12.1120853424,-77.0556945801),(-12.1118040085,-77.0556945801),(-12.1118059158,-77.0559692383),(-12.1115283966,-77.0559692383),(-12.1115283966,-77.0568084717),(-12.1112480164,-77.0568084717),(-12.1112499237,-77.0573577881),(-12.1109724045,-77.0573577881),(-12.1109724045,-77.0576400757),(-12.1104164124,-77.0576400757),(-12.1104164124,-77.0581970215),(-12.1101379395,-77.0581970215),(-12.1101379395,-77.0587463379),(-12.1098623276,-77.0587463379),(-12.1098623276,-77.0593032837),(-12.1093063354,-77.0593032837),(-12.1093063354,-77.0598602295),(-12.1090278625,-77.0598602295),(-12.1090278625,-77.0601425171),(-12.1087503433,-77.0601425171),(-12.1087503433,-77.0604171753),(-12.1084718704,-77.0604171753),(-12.1084718704,-77.0609741211),(-12.1081943512,-77.0609741211),(-12.1081943512,-77.0612487793),(-12.1066741943,-77.060333252),(-12.1031751633,-77.0582427979),(-12.1064958572,-77.0552978516),(-12.1079273224,-77.0537109375),(-12.1075353622,-77.0517807007),(-12.107632637,-77.0507736206),(-12.1086683273,-77.0488891602),(-12.1104183197,-77.0469589233),(-12.1106672287,-77.0460662842),(-12.1104574203,-77.0451583862),(-12.109290123,-77.0426101685),(-12.1099672318,-77.0405807495),(-12.1091632843,-77.0392227173),(-12.1090669632,-77.0386734009),(-12.1100683212,-77.0369796753),(-12.1100950241,-77.036529541),(-12.1089029312,-77.0353240967),(-12.1049365997,-77.0325469971),(-12.1034221649,-77.0310897827),(-12.1030502319,-77.029800415),(-12.1031503677,-77.02709198),(-12.1059169769,-77.027053833),(-12.1091079712,-77.0258712769),(-12.1177034378,-77.0260009766),(-12.119096756,-77.0255355835),(-12.1193122864,-77.024520874),(-12.1198949814,-77.0238037109),(-12.1204881668,-77.022277832),(-12.120680809,-77.017906189),(-12.119603157,-77.0146331787),(-12.117061615,-77.0120315552),(-12.1166496277,-77.0104980469),(-12.1167020798,-77.0093231201),(-12.1173334122,-77.0084152222),(-12.1188879013,-77.0070800781),(-12.1261081696,-77.0023574829)]
# w=False
# while w ==False:
# x= float(input("ingrese numero x:"))
# y=float(input("ingrese numero y:"))
def punto_en_poligono(x, y, poligono):
    """Comprueba si un punto se encuentra dentro de un polígono
        
       poligono - Lista de tuplas con los puntos que forman los vértices [(x1, x2), (x2, y2), ..., (xn, yn)]
    """
    # print("x=", x)
    # print("y=", y)
    i = 0
    j = len(poligono) - 1
    # print("lados del poligono:",len(poligono))
    salida = "No se encuentra dentro del poligono"
    for i in range(len(poligono)):
        # print(poligono[i][1]," <",y," AND ",poligono[j][1],">=",y ,"OR",poligono[j][1],"<",y ,"AND", poligono[i][1]," >= ",y)
  
        if (poligono[i][1] <y and poligono[j][1] >= y) or (poligono[j][1] < y and poligono[i][1] >= y):
            # try:
            #     # print("------------",poligono[i][0] ,"+" ,"(",y ,"- ",poligono[i][1],")", "/" ,"(",poligono[j][1] ,"- ",poligono[i][1],")" ,"* ","(",poligono[j][0] ,"-" ,poligono[i][0],") ", "<", x )
            #     # print("------------",poligono[i][0] + (y - poligono[i][1]) / (poligono[j][1] - poligono[i][1]) * (poligono[j][0] - poligono[i][0]) , "<", x )
            # except:
            #     pass
            if poligono[i][0] + (y - poligono[i][1]) / (poligono[j][1] - poligono[i][1]) * (poligono[j][0] - poligono[i][0]) > x:
                salida ="Se encuentra dentro del poligono"
        j = i
    return salida   

resultado=punto_en_poligono(cor[0],cor[1],poligono)
print(resultado)
print (timeit.timeit(number = 10000))  